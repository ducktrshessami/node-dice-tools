{"version":3,"sources":["../src/error.ts","../src/validate.ts","../src/roll.ts","../src/query.ts"],"sourcesContent":["class CustomError extends Error {\n    constructor(message?: string) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n\nexport class RollQueryError extends CustomError { }\nexport class RollResultError extends CustomError { }\nexport class RollResultParseError extends CustomError { }\n","import { RollQueryError, RollResultError } from \"./error\";\n\nexport const RollQueryPattern = /^(?:[+-]?\\s*(?:\\d*d)?\\d+)(?:\\s*[+-]\\s*(?:\\d*d)?\\d+)*$/i;\n\n/**\n * Includes the `sign`, `count`, and `sides` groups\n * \n * If `count` is null, the item is a constant of value `sides`\n */\nexport const RollQueryItemPattern = /(?<sign>[+-])?\\s*(?:(?<count>\\d*)d)?(?<sides>\\d+)/gi;\n\nfunction validateDiceAttribute(\n    n: number,\n    lowerBound: number,\n    message: string\n): void {\n    if (n < lowerBound || Math.floor(n) !== n) {\n        const value = typeof n === \"string\" ? `'${n}'` : n;\n        throw new RollQueryError(`${message}. Received ${value}`);\n    }\n}\n\nexport function validateDiceAttributes(count: number, sides: number): void {\n    validateDiceAttribute(count, 1, \"Dice count must be a positive whole number\");\n    validateDiceAttribute(sides, 2, \"Sides must be >= 2 and a whole number\");\n}\n\nexport function validateNonEmptyArray(arr: any[]): void {\n    if (!arr.length) {\n        throw new RollResultError(`Result array must not be empty`);\n    }\n}\n","import { RollResultParseError } from \"./error\";\nimport { validateDiceAttributes, validateNonEmptyArray } from \"./validate\";\n\nexport type RollMethod = (sides: number) => number;\nlet rollMethod: RollMethod | null = null;\n\nexport function setRollMethod(method: RollMethod): void {\n    rollMethod = method;\n}\n\nfunction defaultRollMethod(sides: number): number {\n    return Math.ceil(Math.random() * sides);\n}\n\nexport function getRollMethod(): RollMethod {\n    return rollMethod ?? defaultRollMethod;\n}\n\nexport class RollResult {\n    public readonly raw: readonly number[];\n\n    constructor(raw: number[]) {\n        validateNonEmptyArray(raw);\n        this.raw = Object.freeze(raw);\n    }\n\n    get value(): number {\n        return this.raw.reduce((total, result) => total + result);\n    }\n\n    getHits(threshold: number): number {\n        return this.raw.reduce((hits, result) => {\n            if (result >= threshold) {\n                hits++;\n            }\n            return hits;\n        }, 0);\n    }\n\n    getMisses(threshold: number): number {\n        return this.raw.reduce((misses, result) => {\n            if (result <= threshold) {\n                misses++;\n            }\n            return misses;\n        }, 0);\n    }\n\n    getNetHits(hit: number, miss: number): number {\n        if (hit <= miss) {\n            throw new RollResultParseError(`Hit threshold must be greater than miss threshold. Received hit:${hit} miss:${miss}`);\n        }\n        return this.raw.reduce((hits, result) => {\n            if (result >= hit) {\n                hits++;\n            }\n            else if (result <= miss) {\n                hits--;\n            }\n            return hits;\n        }, 0);\n    }\n\n    valueOf(): number {\n        return this.value;\n    }\n}\n\nexport class MultiRollResult {\n    public readonly results: readonly RollResult[]\n\n    constructor(results: RollResult[]) {\n        validateNonEmptyArray(results);\n        this.results = Object.freeze(results);\n    }\n\n    get highest(): RollResult {\n        return this.results.reduce((highest, result) => result.value > highest.value ? result : highest);\n    }\n\n    get lowest(): RollResult {\n        return this.results.reduce((lowest, result) => result.value < lowest.value ? result : lowest);\n    }\n}\n\nexport type Bounds = [number, number];\n\nexport function rawRoll(\n    count: number,\n    sides: number,\n    explode?: number | Bounds\n): RollResult {\n    const method = getRollMethod();\n    const result: number[] = [];\n    for (let i = 0; i < count; i++) {\n        const value = method(sides);\n        result.push(value);\n        if (\n            explode && (\n                typeof explode === \"number\" ?\n                    value === explode : (\n                        value >= Math.min(...explode) &&\n                        value <= Math.max(...explode)\n                    )\n            )\n        ) {\n            i--;\n        }\n    }\n    return new RollResult(result);\n}\n\nexport function roll(\n    count: number,\n    sides: number,\n    explode?: number | Bounds\n): RollResult {\n    validateDiceAttributes(count, sides);\n    return rawRoll(count, sides, explode);\n}\n\nexport function rawRollMulti(\n    count: number,\n    sides: number,\n    rolls: number,\n    explode?: number | Bounds\n): MultiRollResult {\n    const results: RollResult[] = [];\n    for (let i = 0; i < rolls; i++) {\n        results.push(rawRoll(count, sides, explode));\n    }\n    return new MultiRollResult(results);\n}\n\nexport function rollMulti(\n    count: number,\n    sides: number,\n    rolls: number,\n    explode?: number | Bounds\n): MultiRollResult {\n    validateDiceAttributes(count, sides);\n    return rawRollMulti(count, sides, rolls, explode);\n}\n\nexport function rollAdvantage(count: number, sides: number, explode?: number | Bounds): RollResult {\n    const { highest } = rollMulti(count, sides, 2, explode);\n    return highest;\n}\n\nexport function rollDisadvantage(count: number, sides: number, explode?: number | Bounds): RollResult {\n    const { lowest } = rollMulti(count, sides, 2, explode);\n    return lowest;\n}\n","import {\n    MultiRollResult,\n    Bounds,\n    RollResult,\n    rawRoll,\n    rawRollMulti\n} from \"./roll\";\nimport {\n    RollQueryItemPattern,\n    RollQueryPattern,\n    validateDiceAttributes\n} from \"./validate\";\n\nexport class RollQueryItem {\n    public lastResult: RollResult | null;\n\n    constructor(\n        public count: number,\n        public sides: number,\n        public negative: boolean = false\n    ) {\n        this.lastResult = null;\n        validateDiceAttributes(count, sides);\n    }\n\n    private get rawMax(): number {\n        return this.count * this.sides;\n    }\n\n    get min(): number {\n        return this.negative ? this.rawMax * -1 : this.count;\n    }\n\n    get max(): number {\n        return this.negative ? this.count * -1 : this.rawMax;\n    }\n\n    get lastValue(): number | null {\n        return this.lastResult ? this.lastResult.value * (this.negative ? -1 : 1) : null;\n    }\n\n    roll(explode?: number | Bounds): number {\n        this.lastResult = rawRoll(this.count, this.sides, explode);\n        return this.lastValue!;\n    }\n\n    rollMulti(rolls: number, explode?: number | Bounds): MultiRollResult {\n        const result = rawRollMulti(this.count, this.sides, rolls, explode);\n        this.lastResult = result.results[rolls - 1];\n        return result;\n    }\n\n    rollAdvantage(explode?: number | Bounds): number {\n        const { highest } = rawRollMulti(this.count, this.sides, 2, explode);\n        this.lastResult = highest;\n        return this.lastValue!;\n    }\n\n    rollDisadvantage(explode?: number | Bounds): number {\n        const { lowest } = rawRollMulti(this.count, this.sides, 2, explode);\n        this.lastResult = lowest;\n        return this.lastValue!;\n    }\n\n    toString(forceSign: boolean = false): string {\n        const sign = this.negative ? \"-\" : forceSign ? \"+\" : \"\";\n        return `${sign}${this.count}d${this.sides}`;\n    }\n}\n\nexport type RollQueryOptions = {\n    items?: RollQueryItem[];\n    constant?: number;\n};\n\nexport class RollQuery {\n    public items: RollQueryItem[];\n    public constant: number;\n\n    constructor({ items, constant }: RollQueryOptions = {}) {\n        this.items = items ?? [];\n        this.constant = constant ?? 0;\n    }\n\n    static parse(query: string): RollQuery | null {\n        if (!RollQueryPattern.test(query)) {\n            return null;\n        }\n        const q = new RollQuery();\n        const matches = query.matchAll(RollQueryItemPattern);\n        for (const match of matches) {\n            if (match.groups?.count == null) {\n                q.constant += parseInt(match.groups!.sides) * (match.groups!.sign === \"-\" ? -1 : 1);\n            }\n            else try {\n                q.items.push(new RollQueryItem(\n                    match.groups.count ? parseInt(match.groups.count) : 1,\n                    parseInt(match.groups.sides),\n                    match.groups.sign === \"-\"\n                ));\n            }\n            catch {\n                return null;\n            }\n        }\n        return q;\n    }\n\n    get minNat(): number {\n        return this.items.reduce((min, item) => min + item.min, 0);\n    }\n\n    get min(): number {\n        return this.minNat + this.constant;\n    }\n\n    get maxNat(): number {\n        return this.items.reduce((max, item) => max + item.max, 0);\n    }\n\n    get max(): number {\n        return this.maxNat + this.constant;\n    }\n\n    get lastNat(): number | null {\n        let result = 0;\n        for (const item of this.items) {\n            if (item.lastValue == null) {\n                return null;\n            }\n            else {\n                result += item.lastValue;\n            }\n        }\n        return result;\n    }\n\n    get lastValue(): number | null {\n        const natural = this.lastNat;\n        return natural == null ? null : natural + this.constant;\n    }\n\n    roll(): number {\n        return this.items.reduce((result, item) => result + item.roll(), this.constant);\n    }\n\n    rollAdvantage(): number {\n        return this.items.reduce((result, item) => result + item.rollAdvantage(), this.constant);\n    }\n\n    rollDisadvantage(): number {\n        return this.items.reduce((result, item) => result + item.rollDisadvantage(), this.constant);\n    }\n\n    toString(): string {\n        if (!this.items.length) {\n            return this.constant < 0 ? \"-\" + this.constant : this.constant.toString();\n        }\n        const constant = this.constant ? (this.constant < 0 ? \"-\" : \"+\") + this.constant : \"\";\n        let query = this.items[0].toString();\n        for (let i = 1; i < this.items.length; i++) {\n            query += this.items[i].toString(true);\n        }\n        return query + constant;\n    }\n}\n"],"mappings":"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","names":[]}