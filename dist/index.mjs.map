{"version":3,"sources":["../src/error.ts","../src/validate.ts","../src/roll.ts","../src/query.ts"],"sourcesContent":["class CustomError extends Error {\n    constructor(message?: string) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n\nexport class RollQueryError extends CustomError { }\nexport class RollResultError extends CustomError { }\nexport class RollResultParseError extends CustomError { }\n","import { RollQueryError, RollResultError } from \"./error\";\n\nexport const RollQueryPattern = /^(?:[+-]?\\s*(?:\\d*d)?\\d+)(?:\\s*[+-]\\s*(?:\\d*d)?\\d+)*$/i;\n\n/**\n * Includes the `sign`, `count`, and `sides` groups\n * \n * If `count` is null, the item is a constant of value `sides`\n */\nexport const RollQueryItemPattern = /(?<sign>[+-])?\\s*(?:(?<count>\\d*)d)?(?<sides>\\d+)/gi;\n\nfunction validateDiceAttribute(n: number, label: string): void {\n    if (n < 1 || Math.floor(n) !== n) {\n        const value = typeof n === \"string\" ? `'${n}'` : n;\n        throw new RollQueryError(`${label} must be a positive whole number. Received ${value}`);\n    }\n}\n\nexport function validateDiceAttributes(count: number, sides: number): void {\n    validateDiceAttribute(count, \"Dice count\");\n    validateDiceAttribute(sides, \"Sides\");\n}\n\nexport function validateNonEmptyArray(arr: any[]): void {\n    if (!arr.length) {\n        throw new RollResultError(`Result array must not be empty`);\n    }\n}\n","import { RollResultParseError } from \"./error\";\nimport { validateDiceAttributes, validateNonEmptyArray } from \"./validate\";\n\nexport class RollResult {\n    public readonly raw: readonly number[];\n\n    constructor(raw: number[]) {\n        validateNonEmptyArray(raw);\n        this.raw = Object.freeze(raw);\n    }\n\n    get value(): number {\n        return this.raw.reduce((total, result) => total + result);\n    }\n\n    getHits(threshold: number): number {\n        return this.raw.reduce((hits, result) => {\n            if (result >= threshold) {\n                hits++;\n            }\n            return hits;\n        }, 0);\n    }\n\n    getMisses(threshold: number): number {\n        return this.raw.reduce((misses, result) => {\n            if (result <= threshold) {\n                misses++;\n            }\n            return misses;\n        }, 0);\n    }\n\n    getNetHits(hit: number, miss: number): number {\n        if (hit <= miss) {\n            throw new RollResultParseError(`Hit threshold must be greater than miss threshold. Received hit:${hit} miss:${miss}`);\n        }\n        return this.raw.reduce((hits, result) => {\n            if (result >= hit) {\n                hits++;\n            }\n            else if (result <= miss) {\n                hits--;\n            }\n            return hits;\n        }, 0);\n    }\n\n    valueOf(): number {\n        return this.value;\n    }\n}\n\nexport class MultiRollResult {\n    public readonly results: readonly RollResult[]\n\n    constructor(results: RollResult[]) {\n        validateNonEmptyArray(results);\n        this.results = Object.freeze(results);\n    }\n\n    get highest(): RollResult {\n        return this.results.reduce((highest, result) => result.value > highest.value ? result : highest);\n    }\n\n    get lowest(): RollResult {\n        return this.results.reduce((lowest, result) => result.value < lowest.value ? result : lowest);\n    }\n}\n\nexport function rawRoll(count: number, sides: number): RollResult {\n    const result: number[] = [];\n    for (let i = 0; i < count; i++) {\n        result.push(Math.ceil(Math.random() * sides));\n    }\n    return new RollResult(result);\n}\n\nexport function roll(count: number, sides: number): RollResult {\n    validateDiceAttributes(count, sides);\n    return rawRoll(count, sides);\n}\n\nexport function rawRollMulti(\n    count: number,\n    sides: number,\n    rolls: number\n): MultiRollResult {\n    const results: RollResult[] = [];\n    for (let i = 0; i < rolls; i++) {\n        results.push(rawRoll(count, sides));\n    }\n    return new MultiRollResult(results);\n}\n\nexport function rollMulti(\n    count: number,\n    sides: number,\n    rolls: number\n): MultiRollResult {\n    validateDiceAttributes(count, sides);\n    return rawRollMulti(count, sides, rolls);\n}\n\nexport function rollAdvantage(count: number, sides: number): RollResult {\n    const { highest } = rollMulti(count, sides, 2);\n    return highest;\n}\n\nexport function rollDisadvantage(count: number, sides: number): RollResult {\n    const { lowest } = rollMulti(count, sides, 2);\n    return lowest;\n}\n","import {\n    MultiRollResult,\n    RollResult,\n    rawRoll,\n    rawRollMulti\n} from \"./roll\";\nimport {\n    RollQueryItemPattern,\n    RollQueryPattern,\n    validateDiceAttributes\n} from \"./validate\";\n\nexport class RollQueryItem {\n    public lastResult: RollResult | null;\n\n    constructor(\n        public count: number,\n        public sides: number,\n        public negative: boolean = false\n    ) {\n        this.lastResult = null;\n        validateDiceAttributes(count, sides);\n    }\n\n    private get rawMax(): number {\n        return this.count * this.sides;\n    }\n\n    get min(): number {\n        return this.negative ? this.rawMax * -1 : this.count;\n    }\n\n    get max(): number {\n        return this.negative ? this.count * -1 : this.rawMax;\n    }\n\n    get lastValue(): number | null {\n        return this.lastResult ? this.lastResult.value * (this.negative ? -1 : 1) : null;\n    }\n\n    roll(): number {\n        this.lastResult = rawRoll(this.count, this.sides);\n        return this.lastValue!;\n    }\n\n    rollMulti(rolls: number): MultiRollResult {\n        const result = rawRollMulti(this.count, this.sides, rolls);\n        this.lastResult = result.results[rolls - 1];\n        return result;\n    }\n\n    rollAdvantage(): number {\n        const { highest } = rawRollMulti(this.count, this.sides, 2);\n        this.lastResult = highest;\n        return this.lastValue!;\n    }\n\n    rollDisadvantage(): number {\n        const { lowest } = rawRollMulti(this.count, this.sides, 2);\n        this.lastResult = lowest;\n        return this.lastValue!;\n    }\n\n    toString(forceSign: boolean = false): string {\n        const sign = this.negative ? \"-\" : forceSign ? \"+\" : \"\";\n        return `${sign}${this.count}d${this.sides}`;\n    }\n}\n\nexport type RollQueryOptions = {\n    items?: RollQueryItem[];\n    constant?: number;\n};\n\nexport class RollQuery {\n    public items: RollQueryItem[];\n    public constant: number;\n\n    constructor({ items, constant }: RollQueryOptions = {}) {\n        this.items = items ?? [];\n        this.constant = constant ?? 0;\n    }\n\n    static parse(query: string): RollQuery | null {\n        if (!RollQueryPattern.test(query)) {\n            return null;\n        }\n        const q = new RollQuery();\n        const matches = query.matchAll(RollQueryItemPattern);\n        for (const match of matches) {\n            if (match.groups?.count == null) {\n                q.constant += parseInt(match.groups!.sides) * (match.groups!.sign === \"-\" ? -1 : 1);\n            }\n            else try {\n                q.items.push(new RollQueryItem(\n                    match.groups.count ? parseInt(match.groups.count) : 1,\n                    parseInt(match.groups.sides),\n                    match.groups.sign === \"-\"\n                ));\n            }\n            catch {\n                return null;\n            }\n        }\n        return q;\n    }\n\n    get min(): number {\n        return this.items.reduce((min, item) => min + item.min, this.constant);\n    }\n\n    get max(): number {\n        return this.items.reduce((max, item) => max + item.max, this.constant);\n    }\n\n    get lastValue(): number | null {\n        let result = this.constant;\n        for (const item of this.items) {\n            if (item.lastValue == null) {\n                return null;\n            }\n            else {\n                result += item.lastValue;\n            }\n        }\n        return result;\n    }\n\n    roll(): number {\n        return this.items.reduce((result, item) => result + item.roll(), this.constant);\n    }\n\n    rollAdvantage(): number {\n        return this.items.reduce((result, item) => result + item.rollAdvantage(), this.constant);\n    }\n\n    rollDisadvantage(): number {\n        return this.items.reduce((result, item) => result + item.rollDisadvantage(), this.constant);\n    }\n\n    toString(): string {\n        const constant = this.constant ? (this.constant < 0 ? \"-\" : \"+\") + this.constant : \"\";\n        if (!this.items.length) {\n            return constant;\n        }\n        let query = this.items[0].toString();\n        for (let i = 1; i < this.items.length; i++) {\n            query += this.items[i].toString(true);\n        }\n        return query + constant;\n    }\n}\n"],"mappings":"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","names":[]}